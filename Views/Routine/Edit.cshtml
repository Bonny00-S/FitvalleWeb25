@model Fitvalle_25.Models.Exercise.Routine
@{
    Layout = "~/Views/Shared/_LayoutCoach.cshtml";
    ViewData["Title"] = "Asignar rutina";

    var sessions = ViewBag.Sessions as List<Fitvalle_25.Models.Exercise.Session>;
    var sessionExercises = ViewBag.SessionExercises as Dictionary<string, List<Fitvalle_25.Models.Exercise.Viewmodels.SessionExerciseViewModel>>;
}

<div class="card-fitvalle p-8 animate__animated animate__fadeIn">
    <h2 class="text-3xl font-bold mb-6 text-[var(--color-primary)] font-[Poppins] text-center">
        🏋️ Asignar rutina al alumno
    </h2>

    @if (TempData["Error"] != null)
    {
        <div class="bg-red-900/40 border border-red-700 text-red-300 px-4 py-3 rounded mb-4 text-center">
            <strong>Error:</strong> @TempData["Error"]
        </div>
    }
    @if (TempData["Message"] != null)
    {
        <div class="bg-emerald-900/30 border border-emerald-600 text-emerald-300 px-4 py-3 rounded mb-4 text-center">
            @TempData["Message"]
        </div>
    }

    <!-- Botón para agregar sesión -->
    <form asp-action="AddSession" method="post" class="mb-6 text-center">
        <input type="hidden" name="routineId" value="@ViewBag.RoutineId" />
        <button type="submit"
                class="bg-[var(--color-primary)] hover:bg-[var(--color-primary-hover)] text-white px-6 py-2 rounded-lg font-[Poppins] shadow transition duration-300">
            ➕ Agregar sesión
        </button>
        <p class="text-[var(--color-text-secondary)] text-sm mt-2">Máximo 6 sesiones por rutina.</p>
    </form>

    <!-- Mostrar sesiones -->
    <div class="grid md:grid-cols-2 gap-6">
        @if (sessions != null && sessions.Any())
        {
            foreach (var s in sessions)
            {
                var list = sessionExercises.ContainsKey(s.Id!)
                ? sessionExercises[s.Id!]
                : new List<Fitvalle_25.Models.Exercise.Viewmodels.SessionExerciseViewModel>();

                <div class="p-5 bg-[var(--color-surface)] border border-[var(--color-primary)]/40 rounded-xl shadow-md">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="font-semibold text-lg text-[var(--color-text-primary)]">💪 Sesión</h3>
                        <form asp-action="DeleteSession" method="post">
                            <input type="hidden" name="routineId" value="@s.RoutineId" />
                            <input type="hidden" name="sessionId" value="@s.Id" />
                            <button type="submit"
                                    class="text-red-400 hover:text-red-300 font-semibold transition">
                                🗑 Eliminar
                            </button>
                        </form>
                    </div>

                    <div class="flex justify-between items-center mb-3">
                        <p class="text-[var(--color-text-secondary)] text-sm">Ejercicios: (@list.Count / 10)</p>
                        <button type="button"
                                onclick="openExerciseModal('@s.Id')"
                                class="bg-[var(--color-success)] hover:bg-emerald-600 text-white px-4 py-1.5 rounded-md text-sm shadow">
                            ➕ Agregar ejercicio
                        </button>
                    </div>

                    <!-- Lista de ejercicios -->
                    @if (list.Any())
                    {
                        <form onsubmit="updateExercises(event, '@s.Id')">
                            <table class="w-full text-sm border border-[var(--color-primary)]/40 rounded-lg overflow-hidden">
                                <thead class="bg-[var(--color-primary)] text-white">
                                    <tr>
                                        <th class="px-2 py-1">Ejercicio</th>
                                        <th>Series</th>
                                        <th>Reps</th>
                                        <th>Peso</th>
                                        <th>Velocidad</th>
                                        <th>Duración</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-[var(--color-primary)]/25">
                                    @foreach (var e in list)
                                    {
                                        <tr class="hover:bg-[var(--color-primary-hover)]/30 transition" data-exercise-id="@e.Exercise.Id">
                                            <td class="px-2 py-1">@e.Exercise.Name</td>
                                            <td><input type="number" name="sets" value="@e.Data.Sets" class="w-16 bg-[var(--color-surface)] text-center rounded border border-gray-600 text-white" /></td>
                                            <td><input type="number" name="reps" value="@e.Data.Reps" class="w-16 bg-[var(--color-surface)] text-center rounded border border-gray-600 text-white" /></td>
                                            <td><input type="number" step="0.1" name="weight" value="@e.Data.Weight" class="w-16 bg-[var(--color-surface)] text-center rounded border border-gray-600 text-white" /></td>
                                            <td><input type="number" step="0.1" name="speed" value="@e.Data.Speed" class="w-16 bg-[var(--color-surface)] text-center rounded border border-gray-600 text-white" /></td>
                                            <td><input type="number" step="0.1" name="duration" value="@e.Data.Duration" class="w-16 bg-[var(--color-surface)] text-center rounded border border-gray-600 text-white" /></td>
                                            <td>
                                                <button type="button" onclick="removeExercise('@s.Id', '@e.Exercise.Id')" class="text-red-400 hover:text-red-300">
                                                    ✖
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="text-right mt-3">
                                <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-1 rounded-md shadow">
                                    💾 Guardar cambios
                                </button>
                            </div>
                        </form>
                    }
                    else
                    {
                        <p class="text-[var(--color-text-secondary)] text-sm">Aún no hay ejercicios.</p>
                    }
                </div>
            }
        }
        else
        {
            <p class="text-[var(--color-text-secondary)]">Aún no has agregado sesiones.</p>
        }
    </div>

    <!-- ✅ BOTÓN FINAL -->
    <div class="mt-10 text-center">
        @if (ViewBag.IsAssignedRoutine == true)
        {
            <form asp-action="UpdateAssignedRoutine" asp-controller="Routine" method="post">
                <input type="hidden" name="customerId" value="@ViewBag.CustomerId" />
                <input type="hidden" name="routineId" value="@ViewBag.RoutineId" />
                <button type="submit"
                        class="bg-blue-700 hover:bg-blue-800 text-white px-6 py-2 rounded-lg font-[Poppins] shadow transition duration-300">
                    💾 Guardar cambios
                </button>
            </form>
        }
        else
        {
            <form asp-action="AssignRoutine" asp-controller="Routine" method="post">
                <input type="hidden" name="routineId" value="@ViewBag.RoutineId" />
                <button type="submit"
                        class="bg-[var(--color-success)] hover:bg-emerald-600 text-white px-6 py-2 rounded-lg font-[Poppins] shadow transition duration-300">
                    ✅ Asignar rutina
                </button>
            </form>
        }
    </div>
</div>

<!-- 🔹 MODAL DE EJERCICIOS -->
<div id="exerciseModal" class="fixed inset-0 bg-black/70 flex items-center justify-center hidden">
    <div class="bg-[var(--color-surface)] rounded-xl shadow-lg p-6 w-11/12 md:w-3/4 max-h-[80vh] overflow-y-auto border border-[var(--color-primary)]/40">
        <h3 class="text-2xl font-bold mb-4 text-[var(--color-primary)] font-[Poppins] text-center">
            🏋️ Seleccionar ejercicios
        </h3>

        <div class="flex flex-wrap gap-4 mb-4">
            <input id="searchInput" type="text" placeholder="Buscar ejercicio..."
                   class="flex-1 bg-[var(--color-background)] border border-[var(--color-primary)]/30 rounded-lg px-3 py-2 text-[var(--color-text-primary)] focus:ring-2 focus:ring-[var(--color-primary)] outline-none" />
            <select id="muscleFilter"
                    class="bg-[var(--color-surface)] text-[var(--color-text-primary)] border border-[var(--color-primary)]/40 rounded-lg px-3 py-2 appearance-none focus:ring-2 focus:ring-[var(--color-primary)] outline-none transition">
                <option value="">Filtrar por músculo</option>
            </select>

            <select id="typeFilter"
                    class="bg-[var(--color-surface)] text-[var(--color-text-primary)] border border-[var(--color-primary)]/40 rounded-lg px-3 py-2 appearance-none focus:ring-2 focus:ring-[var(--color-primary)] outline-none transition">
                <option value="">Filtrar por tipo</option>
            </select>

        </div>

        <div id="exerciseList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-[var(--color-text-secondary)]">
            <p class="col-span-full text-center">Cargando ejercicios...</p>
        </div>

        <!-- 🔸 Controles de paginación -->
        <div id="paginationControls" class="flex justify-center gap-3 mt-4"></div>

        <div class="mt-6 text-center">
            <button type="button" onclick="closeExerciseModal()"
                    class="bg-[var(--color-primary-hover)] hover:bg-[var(--color-primary)] text-white px-5 py-2 rounded-md font-[Poppins] shadow transition duration-300">
                Cerrar
            </button>
        </div>
    </div>
</div>



<script>
        let allExercises = [];
    let filteredExercises = [];
    let selectedSessionId = null;
    let currentPage = 1;
    const itemsPerPage = 9;

    async function openExerciseModal(sessionId) {
        selectedSessionId = sessionId;
        document.getElementById('exerciseModal').classList.remove('hidden');

        if (allExercises.length === 0) {
            const res = await fetch('/Routine/GetExercises');
            allExercises = await res.json();
            loadFilters();
        }

        filteredExercises = [...allExercises];
        renderExercisesPage();
    }

    function closeExerciseModal() {
        document.getElementById('exerciseModal').classList.add('hidden');
    }

    function loadFilters() {
        const muscles = [...new Set(allExercises.map(e => e.muscle).filter(Boolean))];
        const types = [...new Set(allExercises.map(e => e.type).filter(Boolean))];
        const m = document.getElementById('muscleFilter'),
              t = document.getElementById('typeFilter');
        m.innerHTML = '<option value="">Filtrar por músculo</option>' + muscles.map(x => `<option>${x}</option>`).join('');
        t.innerHTML = '<option value="">Filtrar por tipo</option>' + types.map(x => `<option>${x}</option>`).join('');
        m.onchange = t.onchange = document.getElementById('searchInput').oninput = applyFilters;
    }

    function applyFilters() {
        const s = document.getElementById('searchInput').value.toLowerCase(),
              m = document.getElementById('muscleFilter').value,
              t = document.getElementById('typeFilter').value;

        filteredExercises = allExercises.filter(e =>
            (!s || e.name.toLowerCase().includes(s)) &&
            (!m || e.muscle === m) &&
            (!t || e.type === t)
        );

        currentPage = 1;
        renderExercisesPage();
    }

    function renderExercisesPage() {
        const start = (currentPage - 1) * itemsPerPage;
        const end = start + itemsPerPage;
        const pageItems = filteredExercises.slice(start, end);
        renderExercises(pageItems);
        renderPagination();
    }

    function renderExercises(list) {
        const c = document.getElementById('exerciseList');
        c.innerHTML = list.length
            ? list.map(e => `
                <div class='p-3 border border-[var(--color-primary)]/30 rounded-lg bg-[var(--color-surface)] flex flex-col shadow hover:shadow-lg hover:scale-[1.02] transition'>
                    <h4 class='font-bold text-[var(--color-text-primary)] mb-2 text-lg'>${e.name}</h4>
                    ${e.imageUrl
                        ? `<video autoplay loop muted playsinline class='w-full h-40 rounded-lg mb-2 object-cover border border-[var(--color-primary)]/20'>
                              <source src='${e.imageUrl}' type='video/mp4'>
                           </video>`
                        : `<div class='h-40 bg-[var(--color-background)] rounded-lg mb-2 flex items-center justify-center text-[var(--color-text-secondary)] italic'>Sin video</div>`}
                    <p class='text-sm text-[var(--color-text-secondary)] mb-3'>
                        ${e.muscle || ''} ${e.muscle && e.type ? '|' : ''} ${e.type || ''}
                    </p>
                    <button onclick="addExerciseToSession('${e.id}')"
                            class='mt-auto bg-[var(--color-success)] hover:bg-emerald-600 text-white font-semibold text-sm px-3 py-1 rounded-md transition'>
                        ➕ Agregar
                    </button>
                </div>`
            ).join('')
            : `<p class='col-span-full text-center text-[var(--color-text-secondary)] italic'>No hay ejercicios que coincidan.</p>`;
    }



        function renderPagination() {
        const totalPages = Math.ceil(filteredExercises.length / itemsPerPage);
        const container = document.getElementById('paginationControls');
        if (totalPages <= 1) {
            container.innerHTML = '';
            return;
        }

        let buttons = '';
        for (let i = 1; i <= totalPages; i++) {
            const isActive = i === currentPage;
            buttons += `
                <button class="px-3 py-1 rounded font-[Poppins] text-sm transition
                    ${isActive
                        ? 'bg-[var(--color-primary)] text-white shadow-lg'
                        : 'bg-[var(--color-background)] border border-[var(--color-primary)]/40 text-[var(--color-text-secondary)] hover:bg-[var(--color-primary-hover)]/40'}
                " onclick="changePage(${i})">
                    ${i}
                </button>`;
        }
        container.innerHTML = buttons;
    }


    function changePage(page) {
        currentPage = page;
        renderExercisesPage();
    }

    async function addExerciseToSession(exerciseId) {
        const fd = new FormData();
        fd.append('routineId', '@ViewBag.RoutineId');
        fd.append('sessionId', selectedSessionId);
        fd.append('exerciseId', exerciseId);
        await fetch('/Routine/AddExercise', { method: 'POST', body: fd });
        closeExerciseModal();
        location.reload();
    }


    async function addExerciseToSession(exerciseId) {
        const fd = new FormData();
        fd.append('routineId', '@ViewBag.RoutineId');
        fd.append('sessionId', selectedSessionId);
        fd.append('exerciseId', exerciseId);
        await fetch('/Routine/AddExercise', { method: 'POST', body: fd });
        closeExerciseModal();
        location.reload();
    }

        async function updateExercises(e, sid) {
        e.preventDefault();
        const rows = e.target.querySelectorAll('tbody tr');
        for (const row of rows) {
            const [sets, reps, weight, speed, duration] = [...row.querySelectorAll('input')].map(i => i.value);
            const exId = row.dataset.exerciseId;
            const fd = new FormData();
            fd.append('sessionId', sid);
            fd.append('exerciseId', exId);
            fd.append('sets', sets);
            fd.append('reps', reps);
            fd.append('weight', weight);
            fd.append('speed', speed);
            fd.append('duration', duration);
            const res = await fetch('/Routine/UpdateExerciseValues', { method: 'POST', body: fd });
            console.log(`UpdateExerciseValues (${exId}) → ${res.status}`);
        }
    }


    async function removeExercise(sid, exid) {
        const fd = new FormData();
        fd.append('sessionId', sid);
        fd.append('exerciseId', exid);
        await fetch('/Routine/RemoveExercise', { method: 'POST', body: fd });
        location.reload();
    }
</script>
